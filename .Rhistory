tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(-codgr) %>%
group_by(nomen, nojour, tyrep) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un aliment
group_by(nomen, nojour, tyrep, libgr) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libgr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
full_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
} else if (echelle == "sous-groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, sougr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, sougr, libsougr)), by = c("codgr", "sougr")) %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(- c(codgr, sougr)) %>%
group_by(nomen, nojour, tyrep) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un d'aliment
group_by(nomen, nojour, tyrep, libsougr) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libsougr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
left_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
}
data
}
conso_pattern_grp = prep_conso_pattern(echelle = "groupe")
conso_pattern_sougr = prep_conso_pattern(echelle = "sous-groupe")
write.table(conso_pattern_grp, "Base à analyser/conso_pattern_grp.csv", sep = ";", row.names = FALSE)
write.table(conso_pattern_sougr, "Base à analyser/conso_pattern_sougr.csv", sep = ";", row.names = FALSE)
View(conso_pattern_sougr)
View(consommation)
View(consommation)
library(magrittr)
library(dplyr)
library(ggplot2)
library(plotly)
library(data.table)
setwd("C:/Users/agaca/Documents/GitHub/recommandations_alimentation")
options(scipen=999)
#################
## DATA IMPORT ##
#################
nomenclature = read.csv("Base à analyser/nomenclature.csv", sep = ";", colClasses = c("character"))
consommation = read.csv("Base à analyser/consommation.csv", sep = ",", colClasses = c("character"))
individu = read.csv("Base à analyser/individu.csv", sep = ";", colClasses = c("character"))
repas = read.csv("Base à analyser/repas.csv", sep = ";", colClasses = c("character"))
#######################
## DATA MANIPULATION ##
#######################
#####################################################
## CONSTRUCTION BASE POUR L'ANALYSE MOTIF FRÃQUENT ##
#####################################################
#  motifs frÃ©quents de groupe d'aliment
prep_conso_pattern <- function(echelle) {
"La fonction qui crÃ©e la base pour l'analyse de motif frÃ©quent par groupe d'aliement ou par sous-groupe d'aliment.
Les filtres appliquÃ©s :
+ Enlever la collation du matin et celle du soir
+ Enlever les repas d'un seul aliment
INPUT :
+ echelle : 'groupe' si l'analyse est basÃ©e sur groupe d'aliment
'sous-groupe' si l'analyse est basÃ©e sur sous-groupe d'aliment -- str
OUPUT :
+ Base de donnÃ©es dont les colonnes sont les groupes / sous-groupes d'aliments et les lignes sont les types de repas de chaque individu :
+ 1 : si le groupe / sous-groupe d'aliment est consommÃ©
+ 0 : sinon"
if (echelle == "groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, libgr)), by = "codgr") %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(-codgr) %>%
group_by(nomen, nojour, tyrep) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un aliment
group_by(nomen, nojour, tyrep, libgr) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libgr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
full_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
} else if (echelle == "sous-groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, sougr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, sougr, libsougr)), by = c("codgr", "sougr")) %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(- c(codgr, sougr)) %>%
group_by(nomen, nojour, tyrep) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un d'aliment
group_by(nomen, nojour, tyrep, libsougr) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libsougr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
left_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
}
data
}
conso_pattern_grp = prep_conso_pattern(echelle = "groupe")
conso_pattern_sougr = prep_conso_pattern(echelle = "sous-groupe")
write.table(conso_pattern_grp, "Base à analyser/conso_pattern_grp.csv", sep = ";", row.names = FALSE)
write.table(conso_pattern_sougr, "Base à analyser/conso_pattern_sougr.csv", sep = ";", row.names = FALSE)
View(conso_pattern_sougr)
View(consommation)
View(consommation)
library(magrittr)
library(dplyr)
library(ggplot2)
library(plotly)
library(data.table)
setwd("C:/Users/agaca/Documents/GitHub/recommandations_alimentation")
options(scipen=999)
#################
## DATA IMPORT ##
#################
nomenclature = read.csv("Base à analyser/nomenclature.csv", sep = ";", colClasses = c("character"))
consommation = read.csv("Base à analyser/consommation.csv", sep = ",", colClasses = c("character"))
individu = read.csv("Base à analyser/individu.csv", sep = ";", colClasses = c("character"))
repas = read.csv("Base à analyser/repas.csv", sep = ";", colClasses = c("character"))
#######################
## DATA MANIPULATION ##
#######################
#####################################################
## CONSTRUCTION BASE POUR L'ANALYSE MOTIF FRÃQUENT ##
#####################################################
#  motifs frÃ©quents de groupe d'aliment
prep_conso_pattern <- function(echelle) {
"La fonction qui crÃ©e la base pour l'analyse de motif frÃ©quent par groupe d'aliement ou par sous-groupe d'aliment.
Les filtres appliquÃ©s :
+ Enlever la collation du matin et celle du soir
INPUT :
+ echelle : 'groupe' si l'analyse est basÃ©e sur groupe d'aliment
'sous-groupe' si l'analyse est basÃ©e sur sous-groupe d'aliment -- str
OUPUT :
+ Base de donnÃ©es dont les colonnes sont les groupes / sous-groupes d'aliments et les lignes sont les types de repas de chaque individu :
+ 1 : si le groupe / sous-groupe d'aliment est consommÃ©
+ 0 : sinon"
if (echelle == "groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, libgr)), by = "codgr") %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(-codgr) %>%
group_by(nomen, nojour, tyrep) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un aliment
group_by(nomen, nojour, tyrep, libgr) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libgr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
full_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui, cluster_consommateur)), by = c("nomen", "nojour", "tyrep"))
} else if (echelle == "sous-groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, sougr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, sougr, libsougr)), by = c("codgr", "sougr")) %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(- c(codgr, sougr)) %>%
group_by(nomen, nojour, tyrep) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un d'aliment
group_by(nomen, nojour, tyrep, libsougr) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libsougr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
left_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui, cluster_consommateur)), by = c("nomen", "nojour", "tyrep"))
}
data
}
conso_pattern_grp = prep_conso_pattern(echelle = "groupe")
conso_pattern_sougr = prep_conso_pattern(echelle = "sous-groupe")
write.table(conso_pattern_grp, "Base à analyser/conso_pattern_grp.csv", sep = ";", row.names = FALSE)
write.table(conso_pattern_sougr, "Base à analyser/conso_pattern_sougr.csv", sep = ";", row.names = FALSE)
library(magrittr)
library(dplyr)
library(ggplot2)
library(plotly)
library(data.table)
setwd("C:/Users/agaca/Documents/GitHub/recommandations_alimentation")
options(scipen=999)
#################
## DATA IMPORT ##
#################
nomenclature = read.csv("Base à analyser/nomenclature.csv", sep = ";", colClasses = c("character"))
consommation = read.csv("Base à analyser/consommation.csv", sep = ",", colClasses = c("character"))
individu = read.csv("Base à analyser/individu.csv", sep = ";", colClasses = c("character"))
repas = read.csv("Base à analyser/repas.csv", sep = ";", colClasses = c("character"))
#######################
## DATA MANIPULATION ##
#######################
#####################################################
## CONSTRUCTION BASE POUR L'ANALYSE MOTIF FRÃQUENT ##
#####################################################
#  motifs frÃ©quents de groupe d'aliment
prep_conso_pattern <- function(echelle) {
"La fonction qui crÃ©e la base pour l'analyse de motif frÃ©quent par groupe d'aliement ou par sous-groupe d'aliment.
Les filtres appliquÃ©s :
+ Enlever la collation du matin et celle du soir
INPUT :
+ echelle : 'groupe' si l'analyse est basÃ©e sur groupe d'aliment
'sous-groupe' si l'analyse est basÃ©e sur sous-groupe d'aliment -- str
OUPUT :
+ Base de donnÃ©es dont les colonnes sont les groupes / sous-groupes d'aliments et les lignes sont les types de repas de chaque individu :
+ 1 : si le groupe / sous-groupe d'aliment est consommÃ©
+ 0 : sinon"
if (echelle == "groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, libgr)), by = "codgr") %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(-codgr) %>%
group_by(nomen, nojour, tyrep) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un aliment
group_by(nomen, nojour, tyrep, libgr) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libgr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
full_join(distinct(select(individu, nomen, id_categorie, cluster_consommateur)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
} else if (echelle == "sous-groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, sougr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, sougr, libsougr)), by = c("codgr", "sougr")) %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(- c(codgr, sougr)) %>%
group_by(nomen, nojour, tyrep) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un d'aliment
group_by(nomen, nojour, tyrep, libsougr) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libsougr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
left_join(distinct(select(individu, nomen, id_categorie, cluster_consommateur)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
}
data
}
conso_pattern_grp = prep_conso_pattern(echelle = "groupe")
conso_pattern_sougr = prep_conso_pattern(echelle = "sous-groupe")
write.table(conso_pattern_grp, "Base à analyser/conso_pattern_grp.csv", sep = ";", row.names = FALSE)
write.table(conso_pattern_sougr, "Base à analyser/conso_pattern_sougr.csv", sep = ";", row.names = FALSE)
library(magrittr)
library(dplyr)
library(ggplot2)
library(plotly)
library(data.table)
setwd("C:/Users/agaca/Documents/GitHub/recommandations_alimentation")
options(scipen=999)
#################
## DATA IMPORT ##
#################
nomenclature = read.csv("Base à analyser/nomenclature.csv", sep = ";", colClasses = c("character"))
consommation = read.csv("Base à analyser/consommation.csv", sep = ",", colClasses = c("character"))
individu = read.csv("Base à analyser/individu.csv", sep = ";", colClasses = c("character"))
repas = read.csv("Base à analyser/repas.csv", sep = ";", colClasses = c("character"))
#######################
## DATA MANIPULATION ##
#######################
#####################################################
## CONSTRUCTION BASE POUR L'ANALYSE MOTIF FRÃQUENT ##
#####################################################
#  motifs frÃ©quents de groupe d'aliment
prep_conso_pattern <- function(echelle) {
"La fonction qui crÃ©e la base pour l'analyse de motif frÃ©quent par groupe d'aliement ou par sous-groupe d'aliment.
Les filtres appliquÃ©s :
+ Enlever la collation du matin et celle du soir
INPUT :
+ echelle : 'groupe' si l'analyse est basÃ©e sur groupe d'aliment
'sous-groupe' si l'analyse est basÃ©e sur sous-groupe d'aliment -- str
OUPUT :
+ Base de donnÃ©es dont les colonnes sont les groupes / sous-groupes d'aliments et les lignes sont les types de repas de chaque individu :
+ 1 : si le groupe / sous-groupe d'aliment est consommÃ©
+ 0 : sinon"
if (echelle == "groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, libgr)), by = "codgr") %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(-codgr) %>%
group_by(nomen, nojour, tyrep, cluster_consommateur) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un aliment
group_by(nomen, nojour, tyrep, libgr) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libgr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
full_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
} else if (echelle == "sous-groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, sougr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, sougr, libsougr)), by = c("codgr", "sougr")) %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(- c(codgr, sougr)) %>%
group_by(nomen, nojour, tyrep, cluster_consommateur) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un d'aliment
group_by(nomen, nojour, tyrep, libsougr) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libsougr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
left_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
}
data
}
conso_pattern_grp = prep_conso_pattern(echelle = "groupe")
conso_pattern_sougr = prep_conso_pattern(echelle = "sous-groupe")
write.table(conso_pattern_grp, "Base à analyser/conso_pattern_grp.csv", sep = ";", row.names = FALSE)
write.table(conso_pattern_sougr, "Base à analyser/conso_pattern_sougr.csv", sep = ";", row.names = FALSE)
View(conso_pattern_grp)
library(magrittr)
library(dplyr)
library(ggplot2)
library(plotly)
library(data.table)
setwd("C:/Users/agaca/Documents/GitHub/recommandations_alimentation")
options(scipen=999)
#################
## DATA IMPORT ##
#################
nomenclature = read.csv("Base à analyser/nomenclature.csv", sep = ";", colClasses = c("character"))
consommation = read.csv("Base à analyser/consommation.csv", sep = ",", colClasses = c("character"))
individu = read.csv("Base à analyser/individu.csv", sep = ";", colClasses = c("character"))
repas = read.csv("Base à analyser/repas.csv", sep = ";", colClasses = c("character"))
#######################
## DATA MANIPULATION ##
#######################
#####################################################
## CONSTRUCTION BASE POUR L'ANALYSE MOTIF FRÃQUENT ##
#####################################################
#  motifs frÃ©quents de groupe d'aliment
prep_conso_pattern <- function(echelle) {
"La fonction qui crÃ©e la base pour l'analyse de motif frÃ©quent par groupe d'aliement ou par sous-groupe d'aliment.
Les filtres appliquÃ©s :
+ Enlever la collation du matin et celle du soir
INPUT :
+ echelle : 'groupe' si l'analyse est basÃ©e sur groupe d'aliment
'sous-groupe' si l'analyse est basÃ©e sur sous-groupe d'aliment -- str
OUPUT :
+ Base de donnÃ©es dont les colonnes sont les groupes / sous-groupes d'aliments et les lignes sont les types de repas de chaque individu :
+ 1 : si le groupe / sous-groupe d'aliment est consommÃ©
+ 0 : sinon"
if (echelle == "groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, libgr)), by = "codgr") %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(-codgr) %>%
group_by(nomen, nojour, tyrep, cluster_consommateur) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un aliment
group_by(nomen, nojour, tyrep, libgr, cluster_consommateur) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libgr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
full_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
} else if (echelle == "sous-groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, sougr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, sougr, libsougr)), by = c("codgr", "sougr")) %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(- c(codgr, sougr)) %>%
group_by(nomen, nojour, tyrep, cluster_consommateur) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un d'aliment
group_by(nomen, nojour, tyrep, libsougr, cluster_consommateur) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libsougr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
left_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
}
data
}
conso_pattern_grp = prep_conso_pattern(echelle = "groupe")
conso_pattern_sougr = prep_conso_pattern(echelle = "sous-groupe")
write.table(conso_pattern_grp, "Base à analyser/conso_pattern_grp.csv", sep = ";", row.names = FALSE)
write.table(conso_pattern_sougr, "Base à analyser/conso_pattern_sougr.csv", sep = ";", row.names = FALSE)
View(conso_pattern_sougr)
library(magrittr)
library(dplyr)
setwd("C:/Users/agaca/Documents/GitHub/recommandations_alimentation")
###################
## DATA CLEANING ##
###################
# BASE BRUTE
nomenclature = read.csv("Base brute/Nomenclature_3.csv", sep = ";", colClasses = c("character"))
#consommation = read.csv("Base brute/Table_conso.csv", sep = ";", colClasses = c("character"))
individu = read.csv("Base brute/Table_indiv.csv", sep = ";", colClasses = c("character"))
#repas = read.csv("Base brute/Table_repas.csv", sep = ";", colClasses = c("character"))
#menage = read.csv("Base brute/Table_menage_1.csv", sep = ";", colClasses = c("character"))
# BASE FINALE
individu = individu %>%
select(nomen, sexe_ps, v2_age, poidsm, taille, bmi, opipoids, situ_prof, situ_mat, statnut, pays_nai, region, aptotal_hebdo, aptotal_met, enceinte, regimem, autreg_cod) %>%
mutate(class_age = ifelse(v2_age <= 17, 'enfant',
ifelse(v2_age <= 35, 'jeune adulte',
ifelse(v2_age <= 60, 'adulte', 'personne agee')))) %>%
mutate(id_categorie = group_indices(individu, sexe_ps, class_age))
nomenclature = nomenclature %>%
full_join(nomenclature %>%
select(codgr, libgr) %>%
distinct() %>%
mutate(group_alim = c("pain", "céréales pdj", "pâtes",
"riz et blé", "autres céréales", "viennoiserie",
"biscuits", "pÃ¢tisseries", "lait",
"produit laitier", "fromages", "oeufs",
"beurre", "huile", "margarine",
"autres graisses", "viande", "volaille",
"abats", "charcuterie", "poissons",
"crustacés et mollusques", "légumes", "pommes de terre",
"légumes secs", "fruits", "fruits secs",
"glaces", "chocolat", "sucres",
"eaux", "boissons sans alcool", "alcool",
"café", "boissons chaudes", "pizzas",
"sandwichs", "soupes", "plats composés",
"entremets", "compotes", "condiments",
"aliments particuliers", "-" )), by = c("codgr", "libgr")) %>%
mutate(libsougr = ifelse(sougr == "99", libgr, libsougr))
write.table(individu, "Base à analyser/individu.csv", sep = ";", row.names = FALSE)
write.table(nomenclature, "Base à analyser/nomenclature.csv", sep = ";", row.names = FALSE)
library(magrittr)
library(dplyr)
library(ggplot2)
library(plotly)
library(data.table)
setwd("C:/Users/agaca/Documents/GitHub/recommandations_alimentation")
options(scipen=999)
#################
## DATA IMPORT ##
#################
nomenclature = read.csv("Base à analyser/nomenclature.csv", sep = ";", colClasses = c("character"))
consommation = read.csv("Base à analyser/consommation.csv", sep = ",", colClasses = c("character"))
individu = read.csv("Base à analyser/individu.csv", sep = ";", colClasses = c("character"))
repas = read.csv("Base à analyser/repas.csv", sep = ";", colClasses = c("character"))
#######################
## DATA MANIPULATION ##
#######################
#####################################################
## CONSTRUCTION BASE POUR L'ANALYSE MOTIF FRÃQUENT ##
#####################################################
#  motifs frÃ©quents de groupe d'aliment
prep_conso_pattern <- function(echelle) {
"La fonction qui crÃ©e la base pour l'analyse de motif frÃ©quent par groupe d'aliement ou par sous-groupe d'aliment.
Les filtres appliquÃ©s :
+ Enlever la collation du matin et celle du soir
INPUT :
+ echelle : 'groupe' si l'analyse est basÃ©e sur groupe d'aliment
'sous-groupe' si l'analyse est basÃ©e sur sous-groupe d'aliment -- str
OUPUT :
+ Base de donnÃ©es dont les colonnes sont les groupes / sous-groupes d'aliments et les lignes sont les types de repas de chaque individu :
+ 1 : si le groupe / sous-groupe d'aliment est consommÃ©
+ 0 : sinon"
if (echelle == "groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, libgr)), by = "codgr") %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(-codgr) %>%
group_by(nomen, nojour, tyrep, cluster_consommateur) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un aliment
group_by(nomen, nojour, tyrep, libgr, cluster_consommateur) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libgr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
full_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
} else if (echelle == "sous-groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, sougr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, sougr, libsougr)), by = c("codgr", "sougr")) %>%
filter(codgr != "45", #code non identifiÃ©
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-dÃ©jeuner, le dÃ©jeuner et le diner
select(- c(codgr, sougr)) %>%
group_by(nomen, nojour, tyrep, cluster_consommateur) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un d'aliment
group_by(nomen, nojour, tyrep, libsougr, cluster_consommateur) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libsougr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
left_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
}
data
}
conso_pattern_grp = prep_conso_pattern(echelle = "groupe")
conso_pattern_sougr = prep_conso_pattern(echelle = "sous-groupe")
write.table(conso_pattern_grp, "Base à analyser/conso_pattern_grp.csv", sep = ";", row.names = FALSE)
write.table(conso_pattern_sougr, "Base à analyser/conso_pattern_sougr.csv", sep = ";", row.names = FALSE)
View(conso_pattern_sougr)
View(conso_pattern_sougr)
