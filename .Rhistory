legend.title = element_blank(),
legend.text = element_text(size = rel(1.3), face = "bold"),
legend.background = element_rect(fill = alpha("white", .01)),
panel.spacing.x=unit(0, "lines"),
panel.spacing.y=unit(0.02, "lines"))
) %>%
layout(margin = list(b = 70, l = 140, t = 130),
legend = list(orientation = "h", x = 1, y = 1.09))
ggplotly(
ggplot(reiteration_gen_famille_exp %>%
ungroup() %>%
filter(famille %in% c("PAIEMENT", "VIE DU CONTRAT", "FACTURES", "OFFRES CLARIO", "FUITES", "COMPTEUR ET MODULE"),
nbre_rappel_cumul >= 10), aes(x = date_ouverture, y = taux_rappel_cumul, col = famille, group = famille)) +
#geom_point() +
geom_line() +
# geom_bar(data = reiteration_segment_exp %>%
#            filter(pas_temps == "1 jour",
#                   famille %in% c("PARTICULIER", "PROFESSIONNEL", "GESTIMM")), aes(x = date_ouverture, y = nbre_appel/50), stat = "identity", col = "lightgoldenrod1", alpha = .3) +
facet_grid(exp ~ pas_temps, scales = "free") +
labs(title = paste0("Taux de réitération cumulé de 14 périodes de VEDIF par famille de contact"),
x = paste0("Date d'appel (01/01/2019 - 31/10/2019)"),
y = paste0("Taux de  réitération (%)"),
col = "Pas de temps") +
scale_x_date(breaks = '1 month', date_labels = "%b", limits = c(as.Date("2019-01-01"), as.Date("2019-11-01"))) +
scale_y_continuous(breaks = seq(0, 32, 2)) +
theme_bw() +
theme(plot.title = element_text(size = rel(1.8), face = "bold", hjust = .5),
axis.title = element_text(size = rel(1.5), face = "bold"),
axis.text.x = element_text(size = rel(1.3), face = "bold", angle = 30),
axis.text.y = element_text(size = rel(1.5), face = "bold"),
strip.text = element_text(size = rel(1.4), face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = rel(1.3), face = "bold"),
legend.background = element_rect(fill = alpha("white", .01)),
panel.spacing.x=unit(0, "lines"),
panel.spacing.y=unit(0.1, "lines"))
) %>%
layout(margin = list(b = 70, l = 140, t = 130),
legend = list(orientation = "h", x = 1, y = 1.09))
ggplotly(
ggplot(reiteration_gen_famille_exp %>%
ungroup() %>%
filter(famille %in% c("PAIEMENT", "VIE DU CONTRAT", "FACTURES", "OFFRES CLARIO", "FUITES", "COMPTEUR ET MODULE"),
nbre_rappel_cumul >= 10), aes(x = date_ouverture, y = taux_rappel_cumul, col = famille, group = famille)) +
#geom_point() +
geom_line() +
# geom_bar(data = reiteration_segment_exp %>%
#            filter(pas_temps == "1 jour",
#                   famille %in% c("PARTICULIER", "PROFESSIONNEL", "GESTIMM")), aes(x = date_ouverture, y = nbre_appel/50), stat = "identity", col = "lightgoldenrod1", alpha = .3) +
facet_grid(exp ~ pas_temps, scales = "free") +
labs(title = paste0("Taux de réitération cumulé de 14 périodes de VEDIF par famille de contact"),
x = paste0("Date d'appel (01/01/2019 - 31/10/2019)"),
y = paste0("Taux de  réitération (%)"),
col = "Pas de temps") +
scale_x_date(breaks = '1 month', date_labels = "%b", limits = c(as.Date("2019-01-01"), as.Date("2019-11-01"))) +
scale_y_continuous(breaks = seq(0, 32, 2)) +
theme_bw() +
theme(plot.title = element_text(size = rel(1.8), face = "bold", hjust = .5),
axis.title = element_text(size = rel(1.5), face = "bold"),
axis.text.x = element_text(size = rel(1.3), face = "bold", angle = 30),
axis.text.y = element_text(size = rel(1.5), face = "bold"),
strip.text = element_text(size = rel(1.4), face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = rel(1.3), face = "bold"),
legend.background = element_rect(fill = alpha("white", .01)),
panel.spacing.x=unit(0.1, "lines"),
panel.spacing.y=unit(0.1, "lines"))
) %>%
layout(margin = list(b = 70, l = 140, t = 130),
legend = list(orientation = "h", x = 1, y = 1.09))
, angle = 30
ggplotly(
ggplot(reiteration_gen_famille_exp %>%
ungroup() %>%
filter(famille %in% c("PAIEMENT", "VIE DU CONTRAT", "FACTURES", "OFFRES CLARIO", "FUITES", "COMPTEUR ET MODULE"),
nbre_rappel_cumul >= 10), aes(x = date_ouverture, y = taux_rappel_cumul, col = famille, group = famille)) +
#geom_point() +
geom_line() +
# geom_bar(data = reiteration_segment_exp %>%
#            filter(pas_temps == "1 jour",
#                   famille %in% c("PARTICULIER", "PROFESSIONNEL", "GESTIMM")), aes(x = date_ouverture, y = nbre_appel/50), stat = "identity", col = "lightgoldenrod1", alpha = .3) +
facet_grid(exp ~ pas_temps, scales = "free") +
labs(title = paste0("Taux de réitération cumulé de 14 périodes de VEDIF par famille de contact"),
x = paste0("Date d'appel (01/01/2019 - 31/10/2019)"),
y = paste0("Taux de  réitération (%)"),
col = "Pas de temps") +
scale_x_date(breaks = '1 month', date_labels = "%b", limits = c(as.Date("2019-01-01"), as.Date("2019-11-01"))) +
scale_y_continuous(breaks = seq(0, 32, 2)) +
theme_bw() +
theme(plot.title = element_text(size = rel(1.8), face = "bold", hjust = .5),
axis.title = element_text(size = rel(1.5), face = "bold"),
axis.text.x = element_text(size = rel(1.3), face = "bold"),
axis.text.y = element_text(size = rel(1.5), face = "bold"),
strip.text = element_text(size = rel(1.4), face = "bold"),
legend.title = element_blank(),
legend.text = element_text(size = rel(1.3), face = "bold"),
legend.background = element_rect(fill = alpha("white", .01)),
panel.spacing.x=unit(0.1, "lines"),
panel.spacing.y=unit(0.1, "lines"))
) %>%
layout(margin = list(b = 70, l = 140, t = 130),
legend = list(orientation = "h", x = 1, y = 1.09))
demandes_2019 %>%
group_by(segmentation_dest) %>%
summarise(nbre_appel_annuel = n()) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(segmentation_dest) %>%
summarise(nbre_appel_annuel = n()) %>%
mutate(segmentation_dest = ifelse(is.na(segmentation_dest), "Non déterminé", segmentation_dest)) +
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(segmentation_dest) %>%
summarise(nbre_appel_annuel = n()) %>%
mutate(segmentation_dest = ifelse(is.na(segmentation_dest), "Non déterminé", segmentation_dest)) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(segmentation_dest) %>%
summarise(nbre_appel_annuel = n()) %>%
mutate(segmentation_dest = ifelse(is.na(segmentation_dest), "NON DETERMINE", segmentation_dest)) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
length(unique(demandes_2019$ecouteur))
"Véronique" %in% unique(demandes_2019$ecouteur)
"Veronique LACOMERE" %in% unique(demandes_2019$ecouteur)
unique(demandes_2019$ecouteur)
272 - 19
19/272
load("D:/Veolia/Modélisation des appels/VEDIF/BDD/.RData")
library(magrittr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(plotly)
library(tidyr)
library(zoo)
library(scales)
library(readxl)
View(R1j_rappel_general_exp)
library(magrittr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(plotly)
library(tidyr)
library(zoo)
library(scales)
library(readxl)
data = R1j_rappel_general_exp %>%
select(date_ouverture, taux_rappel_cumul) %>%
filter(date_ouverture >= as.Date("2019-03-01"))
data = R1j_rappel_general_exp %>%
ungroup() %>%
select(date_ouverture, taux_rappel_cumul) %>%
filter(date_ouverture >= as.Date("2019-03-01"))
unique(data$exp)
data = R1j_rappel_general_exp %>%
ungroup() %>%
select(date_ouverture, exp, taux_rappel_cumul) %>%
filter(date_ouverture >= as.Date("2019-03-01"))
unique(data$exp)
data = R1j_rappel_general_exp %>%
ungroup() %>%
select(date_ouverture, exp, taux_rappel_cumul) %>%
filter(date_ouverture >= as.Date("2019-03-01")) %>%
mutate(exp = ifelse(exp = "expert", "Entreprise 1", "Entreprise 2"))
data = R1j_rappel_general_exp %>%
ungroup() %>%
select(date_ouverture, exp, taux_rappel_cumul) %>%
filter(date_ouverture >= as.Date("2019-03-01")) %>%
mutate(exp = ifelse(exp == "expert", "Entreprise 1", "Entreprise 2"))
View(data)
data = R1j_rappel_general_exp %>%
ungroup() %>%
select(date_ouverture, exp, taux_rappel_cumul) %>%
filter(date_ouverture >= as.Date("2019-03-01")) %>%
mutate(exp = ifelse(exp == "expert", "Entreprise 1", "Entreprise 2")) %>%
set_colnames(c("date", "entreprise", "indice"))
data = R1j_rappel_general_exp %>%
ungroup() %>%
select(date_ouverture, exp, taux_rappel_cumul) %>%
filter(date_ouverture >= as.Date("2019-03-01")) %>%
mutate(exp = ifelse(exp == "expert", "Entreprise 1", "Entreprise 2")) %>%
set_colnames(c("date", "entreprise", "indice")) %>%
mutate(indice = 2*indice + exp(2) - 4)
ggplot(data, aes(x = date, y = indice, color = entreprise)) +
geom_line()
data = R1j_rappel_general_exp %>%
ungroup() %>%
select(date_ouverture, exp, taux_rappel_cumul) %>%
filter(date_ouverture >= as.Date("2019-03-01")) %>%
mutate(exp = ifelse(exp == "expert", "Entreprise 1", "Entreprise 2")) %>%
set_colnames(c("date", "entreprise", "indice")) %>%
mutate(indice = 2*indice + exp(2) - 4) %>%
mutate(indice = ifelse(entreprise == "Entreprise 2", indice - 10, indice))
ggplot(data, aes(x = date, y = indice, color = entreprise)) +
geom_line()
data = R1j_rappel_general_exp %>%
ungroup() %>%
select(date_ouverture, exp, taux_rappel_cumul) %>%
filter(date_ouverture >= as.Date("2019-03-01")) %>%
mutate(exp = ifelse(exp == "expert", "Entreprise 1", "Entreprise 2")) %>%
set_colnames(c("date", "entreprise", "indice")) %>%
mutate(indice = 2*indice + exp(2) - 4) %>%
mutate(indice = ifelse(entreprise == "Entreprise 2", indice - 12, indice))
ggplot(data, aes(x = date, y = indice, color = entreprise)) +
geom_line()
write.table(data, "indice_entreprise.csv", sep = ";", row.names = FALSE)
library(magrittr)
library(dplyr)
library(lubridate)
library(ggplot2)
library(plotly)
library(tidyr)
library(zoo)
library(scales)
library(readxl)
# Segment
test_t_segment <- function(data) {
data = data %>%
filter(segmentation_dest %in% c("PARTICULIER", "PROFESSIONNEL", "GESTIMM")) %>%
select(segmentation_dest, date_ouverture, pas_temps, exp, taux_rappel_cumul) %>%
group_by(segmentation_dest, pas_temps, date_ouverture) %>%
mutate(eff = n ()) %>%
filter(eff > 1) %>%
ungroup()
d = data.frame()
for (segment in unique(data$segmentation_dest)) {
for (pas in unique(data$pas_temps)) {
print(paste0("Pas de temps : ", pas))
result_test = t.test(taux_rappel_cumul ~ exp, data = filter(data, pas_temps == pas,
segmentation_dest == segment), paired = TRUE)
print(result_test)
d = rbind(d, c(segment, pas, round(100*(1 - result_test$p.value), 2), round(100*result_test$conf.int/mean(filter(data, pas_temps == pas,
segmentation_dest == segment,
exp == "Chargé(e) de clientèle")$taux_rappel_cumul), 2)))
}
}
d %>%
set_colnames(c("segmentation_dest", "pas_temps", "confiance", "borne_inf", "borne_sup"))
}
test_reiteration_seg = test_t_segment(reiteration_segment_exp)
# Famille
test_t_famille <- function(data) {
data = data %>%
filter(famille %in% c("COMPTEUR ET MODULE", "FACTURES", "FUITES", "OFFRES CLARIO", "PAIEMENT", "VIE DU CONTRAT")) %>%
select(famille, date_ouverture, pas_temps, exp, taux_rappel_cumul) %>%
group_by(famille, pas_temps, date_ouverture) %>%
mutate(eff = n ()) %>%
filter(eff > 1) %>%
ungroup()
d = data.frame()
for (fam in unique(data$famille)) {
for (pas in unique(data$pas_temps)) {
print(paste0("Pas de temps : ", pas))
result_test = t.test(taux_rappel_cumul ~ exp, data = filter(data, pas_temps == pas,
famille == fam), paired = TRUE)
print(result_test)
d = rbind(d, c(fam, pas, round(100*(1 - result_test$p.value), 2), round(100*result_test$conf.int/mean(filter(data, pas_temps == pas,
famille == fam,
exp == "Chargé(e) de clientèle")$taux_rappel_cumul), 2)))
}
}
d %>%
set_colnames(c("famille", "pas_temps", "confiance", "borne_inf", "borne_sup"))
}
test_reiteration_fam = test_t_famille(reiteration_gen_famille_exp)
View(test_reiteration_fam)
View(test_reiteration_seg)
load("D:/Veolia/Modélisation des appels/VEDIF/.RData")
test_t_segment <- function(data) {
data = data %>%
filter(segmentation_dest %in% c("PARTICULIER", "PROFESSIONNEL", "GESTIMM")) %>%
select(segmentation_dest, date_ouverture, pas_temps, exp, taux_rappel_cumul) %>%
group_by(segmentation_dest, pas_temps, date_ouverture) %>%
mutate(eff = n ()) %>%
filter(eff > 1) %>%
ungroup()
d = data.frame()
for (segment in unique(data$segmentation_dest)) {
for (pas in unique(data$pas_temps)) {
print(paste0("Pas de temps : ", pas))
result_test = t.test(taux_rappel_cumul ~ exp, data = filter(data, pas_temps == pas,
segmentation_dest == segment), paired = TRUE)
print(result_test)
d = rbind(d, c(segment, pas, round(100*(1 - result_test$p.value), 2), round(100*result_test$conf.int/mean(filter(data, pas_temps == pas,
segmentation_dest == segment,
exp == "Chargé(e) de clientèle")$taux_rappel_cumul), 2)))
}
}
d %>%
set_colnames(c("segmentation_dest", "pas_temps", "confiance", "borne_inf", "borne_sup"))
}
test_reiteration_seg = test_t_segment(reiteration_segment_exp)
View(test_reiteration_seg)
View(test_reiteration_seg)
test_t_famille <- function(data) {
data = data %>%
filter(famille %in% c("COMPTEUR ET MODULE", "FACTURES", "FUITES", "OFFRES CLARIO", "PAIEMENT", "VIE DU CONTRAT")) %>%
select(famille, date_ouverture, pas_temps, exp, taux_rappel_cumul) %>%
group_by(famille, pas_temps, date_ouverture) %>%
mutate(eff = n ()) %>%
filter(eff > 1) %>%
ungroup()
d = data.frame()
for (fam in unique(data$famille)) {
for (pas in unique(data$pas_temps)) {
print(paste0("Pas de temps : ", pas))
result_test = t.test(taux_rappel_cumul ~ exp, data = filter(data, pas_temps == pas,
famille == fam), paired = TRUE)
print(result_test)
d = rbind(d, c(fam, pas, round(100*(1 - result_test$p.value), 2), round(100*result_test$conf.int/mean(filter(data, pas_temps == pas,
famille == fam,
exp == "Chargé(e) de clientèle")$taux_rappel_cumul), 2)))
}
}
d %>%
set_colnames(c("famille", "pas_temps", "confiance", "borne_inf", "borne_sup"))
}
test_reiteration_fam = test_t_famille(reiteration_gen_famille_exp)
test_t_famille <- function(data) {
data = data %>%
filter(famille %in% c("COMPTEUR ET MODULE", "FACTURES", "FUITES", "OFFRES CLARIO", "PAIEMENT", "VIE DU CONTRAT")) %>%
select(famille, date_ouverture, pas_temps, exp, taux_rappel_cumul) %>%
group_by(famille, pas_temps, date_ouverture) %>%
mutate(eff = n ()) %>%
filter(eff > 1) %>%
ungroup()
d = data.frame()
for (fam in unique(data$famille)) {
for (pas in unique(data$pas_temps)) {
print(paste0("Pas de temps : ", pas))
result_test = t.test(taux_rappel_cumul ~ exp, data = filter(data, pas_temps == pas,
famille == fam), paired = TRUE)
print(result_test)
d = rbind(d, c(fam, pas, round(100*(1 - result_test$p.value), 2), round(100*result_test$conf.int/mean(filter(data, pas_temps == pas,
exp == "Chargé(e) de clientèle")$taux_rappel_cumul), 2)))
}
}
d %>%
set_colnames(c("famille", "pas_temps", "confiance", "borne_inf", "borne_sup"))
}
test_reiteration_fam = test_t_famille(reiteration_gen_famille_exp)
View(test_reiteration_seg)
View(test_reiteration_gen)
View(test_reiteration_fam)
options(stringsAsFactors = FALSE)
test_reiteration_fam = test_t_famille(reiteration_gen_famille_exp)
test_t_famille <- function(data) {
data = data %>%
filter(famille %in% c("COMPTEUR ET MODULE", "FACTURES", "FUITES", "OFFRES CLARIO", "PAIEMENT", "VIE DU CONTRAT")) %>%
select(famille, date_ouverture, pas_temps, exp, taux_rappel_cumul) %>%
group_by(famille, pas_temps, date_ouverture) %>%
mutate(eff = n ()) %>%
filter(eff > 1) %>%
ungroup()
d = data.frame()
for (fam in unique(data$famille)) {
for (pas in unique(data$pas_temps)) {
print(paste0("Pas de temps : ", pas))
result_test = t.test(taux_rappel_cumul ~ exp, data = filter(data, pas_temps == pas,
famille == fam), paired = TRUE)
print(result_test)
d = rbind(d, c(fam, pas, round(100*(1 - result_test$p.value), 2), round(100*result_test$conf.int/mean(filter(data, pas_temps == pas,
famille == fam,
exp == "Chargé(e) de clientèle")$taux_rappel_cumul), 2)))
}
}
d %>%
set_colnames(c("famille", "pas_temps", "confiance", "borne_inf", "borne_sup"))
}
test_reiteration_fam = test_t_famille(reiteration_gen_famille_exp)
test_reiteration_seg = test_t_segment(reiteration_segment_exp)
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n())
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
tidyr::spread(key = exp, values = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup() %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup() %>%
tidyr::spread(key = exp, value = famille) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup() %>%
tidyr::spread(key = exp, value = nbre_appel_annuel, -c(famille)) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup() %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()
test = demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()
test = test %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
mutate(part = `Chargé(e)s de clientèle confirmé(e)s`/`Chargé(e)s de clientèle`) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
mutate(part = `Chargé(e) de clientèle confirmé(e)`/`Chargé(e) de clientèle`) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
mutate(part = round(100*`Chargé(e) de clientèle confirmé(e)`/`Chargé(e) de clientèle`,2)) %>%
arrange(desc(part)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
mutate(part = round(100*`Chargé(e) de clientèle confirmé(e)`/`Chargé(e) de clientèle`,2)) %>%
arrange(desc(part)) %>%
filter(!is.na(famille)) %>%
View()
load("D:/APT/3e_annee/Projet fil rouge/code_groupe/recommandations_alimentation/.RData")
repas[4,5[]]
repas[4,5]
# BASE BRUTE
nomenclature = read.csv("Base brute/Nomenclature_3.csv", sep = ";", colClasses = c("character"))
setwd("D:/APT/3e_annee/Projet fil rouge/code_groupe/recommandations_alimentation")
library(magrittr)
library(dplyr)
library(readxl)
# BASE BRUTE
nomenclature = read.csv("Base brute/Nomenclature_3.csv", sep = ";", colClasses = c("character"))
#repas = read.csv("Base brute/Table_repas.csv", sep = ";", colClasses = c("character"))
#menage = read.csv("Base brute/Table_menage_1.csv", sep = ";", colClasses = c("character"))
role_repas = read_excel("Base_a_analyser/roles_repas.xlsx", col_types = "text")
nomenclature = nomenclature %>%
full_join(nomenclature %>%
select(codgr, libgr) %>%
distinct() %>%
mutate(group_alim = c("pain", "céréales pdj", "pâtes",
"riz et blé", "autres céréales", "viennoiserie",
"biscuits", "pâtisseries", "lait",
"produit laitier", "fromages", "oeufs",
"beurre", "huile", "margarine",
"autres graisses", "viande", "volaille",
"abats", "charcuterie", "poissons",
"crustacés et mollusques", "légumes", "pommes de terre",
"légumes secs", "fruits", "fruits secs",
"glaces", "chocolat", "sucres",
"eaux", "boissons sans alcool", "alcool",
"café", "boissons chaudes", "pizzas",
"sandwichs", "soupes", "plats composés",
"entremets", "compotes", "condiments",
"aliments particuliers", "-" )), by = c("codgr", "libgr")) %>%
mutate(libsougr = ifelse(sougr == "99", libgr, libsougr)) %>%
left_join(distinct(select(role_repas, codegr, code_role)), by = c("codgr" = "codegr")) %>%
filter(codgr != 45)
write.table(nomenclature, "Base_a_analyser/nomenclature.csv", sep = ";", row.names = FALSE)
write.table(nomenclature, "Base_a_analyser/nomenclature.csv", sep = ";", row.names = FALSE)
