for (pas in unique(data$pas_temps)) {
print(paste0("Pas de temps : ", pas))
result_test = t.test(taux_rappel_cumul ~ exp, data = filter(data, pas_temps == pas,
famille == fam), paired = TRUE)
print(result_test)
d = rbind(d, c(fam, pas, round(100*(1 - result_test$p.value), 2), round(100*result_test$conf.int/mean(filter(data, pas_temps == pas,
famille == fam,
exp == "Chargé(e) de clientèle")$taux_rappel_cumul), 2)))
}
}
d %>%
set_colnames(c("famille", "pas_temps", "confiance", "borne_inf", "borne_sup"))
}
test_reiteration_fam = test_t_famille(reiteration_gen_famille_exp)
test_reiteration_seg = test_t_segment(reiteration_segment_exp)
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n())
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
tidyr::spread(key = exp, values = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup() %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup() %>%
tidyr::spread(key = exp, value = famille) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup() %>%
tidyr::spread(key = exp, value = nbre_appel_annuel, -c(famille)) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup() %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()
test = demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()
test = test %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
mutate(part = `Chargé(e)s de clientèle confirmé(e)s`/`Chargé(e)s de clientèle`) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
mutate(part = `Chargé(e) de clientèle confirmé(e)`/`Chargé(e) de clientèle`) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
mutate(part = round(100*`Chargé(e) de clientèle confirmé(e)`/`Chargé(e) de clientèle`,2)) %>%
arrange(desc(part)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
mutate(part = round(100*`Chargé(e) de clientèle confirmé(e)`/`Chargé(e) de clientèle`,2)) %>%
arrange(desc(part)) %>%
filter(!is.na(famille)) %>%
View()
load("D:/APT/3e_annee/Projet fil rouge/code_groupe/recommandations_alimentation/.RData")
repas[4,5[]]
repas[4,5]
data = read.csv("D:/APT/3e_annee/Projet fil rouge/code_groupe/recommandations_alimentation/Base_a_analyser/conso_pattern_sougr.csv", sep = ";")
View(data)
library(magrittr)
library(dplyr)
library(tidyr)
d = data %>%
mutate(lib_typ = ifelse(tyrep == 1, "petitdej",
ifelse(tyrep == 3, "dej",
ifelse(tyrep == 4, "gouter", "diner"))),
val_typ = 1)
View(data)
View(d)
View(d)
d %>%
select(lib_typ, val_typ) %>%
View()
d = data %>%
mutate(lib_typ = ifelse(tyrep == 1, "petitdej",
ifelse(tyrep == 3, "dej",
ifelse(tyrep == 4, "gouter", "diner"))),
val_typ = 1) %>%
spread(key = lib_typ, value = val_typ)
View(d)
d1 = d[,125:]
d1 = d[,seq(125,131)]
View(d1)
unique(d$avecqui)
d = data %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
lib_avecqui = ifelse(avecqui == 1, "seul",
ifelse(avecqui == 2, "famille",
ifelse(avecqui == 3, "amis", "autre"))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1) %>%
spread(key = lib_typ, value = val_typ, fill = 0) %>%
spread(key = lib_avecqui, value = val_avecqui, fill = 0) %>%
spread(key = lib_cluster, value = val_cluster, fill = 0)
d = data %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
lib_avecqui = ifelse(avecqui == 1, "seul",
ifelse(avecqui == 2, "famille",
ifelse(avecqui == 3, "amis", "autre"))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1) %>%
spread(key = lib_tyrep, value = val_tyrep, fill = 0) %>%
spread(key = lib_avecqui, value = val_avecqui, fill = 0) %>%
spread(key = lib_cluster, value = val_cluster, fill = 0)
View(d)
d1 = d[,seq(125,139)]
View(d1)
write.table(d, "conso_pattern_sougr_transfo.csv", sep = ";", row.names = FALSE)
View(data)
data = read.csv("D:/APT/3e_annee/Projet fil rouge/code_groupe/recommandations_alimentation/Base_a_analyser/conso_pattern_sougr.csv", sep = ";")
View(data)
data = read.csv("D:/APT/3e_annee/Projet fil rouge/code_groupe/recommandations_alimentation/Base_a_analyser/conso_pattern_sougr.csv", sep = ";", check.names=FALSE)
View(data)
d = data %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
lib_avecqui = ifelse(avecqui == 1, "seul",
ifelse(avecqui == 2, "famille",
ifelse(avecqui == 3, "amis", "autre"))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1)
is.na(d$lib_avecqui)
sum(is.na(d$lib_avecqui))
d = data %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
lib_avecqui = if_else(avecqui == 1, "seul",
if_else(avecqui == 2, "famille",
if_else(avecqui == 3, "amis", "autre"))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1)
sum(is.na(d$lib_avecqui))
d %>%
filter(is.na(lib_avecqui)) %>%
View()
d[,seq(125,139)] %>%
filter(is.na(lib_avecqui)) %>%
View()
d1 = d[,seq(125,139)]
d1 %>%
filter(is.na(lib_avecqui)) %>%
View()
d = data %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
lib_avecqui = if_else(avecqui == 1, "seul",
if_else(avecqui == 2, "famille",
if_else(avecqui == 3, "amis", "autre"))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1)
d1 = d[,seq(125,133)]
d1 %>%
filter(is.na(lib_avecqui)) %>%
View()
d = data %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
lib_avecqui = if_else(avecqui == 1, "seul",
if_else(avecqui == 2, "famille",
if_else(is.na(avecqui) & avecqui != 3, "autre", "amis"))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1)
sum(is.na(d$lib_avecqui))
d = data %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
lib_avecqui = if_else(avecqui == 1, "seul",
if_else(avecqui == 2, "famille",
if_else(is.na(avecqui) || avecqui != 3, "autre", "amis"))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1)
sum(is.na(d$lib_avecqui))
d = data %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
lib_avecqui = if_else(avecqui == 1, "seul",
if_else(avecqui == 2, "famille",
if_else(is.na(avecqui) | avecqui != 3, "autre", "amis"))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1)
sum(is.na(d$lib_avecqui))
d = data %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
lib_avecqui = if_else(avecqui == 1, "seul",
if_else(avecqui == 2, "famille",
if_else(is.na(avecqui), "autre",
ifelse(avecqui == 3, "amis", "autre")))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1)
sum(is.na(d$lib_avecqui))
d = data %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
lib_avecqui = ifelse(is.na(avecqui), "autre", "adefinir"),
lib_avecqui = ifelse(avecqui == 1, "seul",
ifelse(avecqui == 2, "famille",
ifelse(avecqui == 3, "amis", "autre")))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1)
sum(is.na(d$lib_avecqui))
d = data %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
lib_avecqui = ifelse(is.na(avecqui), "autre", "adefinir"),
lib_avecqui = ifelse(avecqui == 1, "seul",
ifelse(avecqui == 2, "famille",
ifelse(avecqui == 3, "amis", "autre"))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1)
sum(is.na(d$lib_avecqui))
sum(is.na(d$lib_avecqui))
d = data %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
lib_avecqui = ifelse(is.na(avecqui), "autre", "adefinir"),
lib_avecqui = ifelse(avecqui == 1, "seul",
ifelse(avecqui == 2, "famille",
ifelse(avecqui == 3, "amis", "autre"))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1) %>%
spread(key = lib_tyrep, value = val_tyrep, fill = 0) %>%
spread(key = lib_avecqui, value = val_avecqui, fill = 0) %>%
spread(key = lib_cluster, value = val_cluster, fill = 0)
write.table(d, "conso_pattern_sougr_transfo.csv", sep = ";", row.names = FALSE)
colnames(d)
d = d %>%
select(- `<NA>`)
write.table(d, "conso_pattern_sougr_transfo.csv", sep = ";", row.names = FALSE)
colnames(d)
#repas = read.csv("Base brute/Table_repas.csv", sep = ";", colClasses = c("character"))
#menage = read.csv("Base brute/Table_menage_1.csv", sep = ";", colClasses = c("character"))
role_repas = read_excel("Base_a_analyser/roles_repas.xlsx")
library(readxl)
#repas = read.csv("Base brute/Table_repas.csv", sep = ";", colClasses = c("character"))
#menage = read.csv("Base brute/Table_menage_1.csv", sep = ";", colClasses = c("character"))
role_repas = read_excel("Base_a_analyser/roles_repas.xlsx")
setwd("D:/APT/3e_annee/Projet fil rouge/code_groupe/recommandations_alimentation")
#repas = read.csv("Base brute/Table_repas.csv", sep = ";", colClasses = c("character"))
#menage = read.csv("Base brute/Table_menage_1.csv", sep = ";", colClasses = c("character"))
role_repas = read_excel("Base_a_analyser/roles_repas.xlsx")
View(data)
View(role_repas)
library(magrittr)
library(dplyr)
# BASE BRUTE
nomenclature = read.csv("Base brute/Nomenclature_3.csv", sep = ";", colClasses = c("character"))
colnames(role_repas)
View(nomenclature)
nomenclature = nomenclature %>%
full_join(nomenclature %>%
select(codgr, libgr) %>%
distinct() %>%
mutate(group_alim = c("pain", "céréales pdj", "pâtes",
"riz et blé", "autres céréales", "viennoiserie",
"biscuits", "pâtisseries", "lait",
"produit laitier", "fromages", "oeufs",
"beurre", "huile", "margarine",
"autres graisses", "viande", "volaille",
"abats", "charcuterie", "poissons",
"crustacés et mollusques", "légumes", "pommes de terre",
"légumes secs", "fruits", "fruits secs",
"glaces", "chocolat", "sucres",
"eaux", "boissons sans alcool", "alcool",
"café", "boissons chaudes", "pizzas",
"sandwichs", "soupes", "plats composés",
"entremets", "compotes", "condiments",
"aliments particuliers", "-" )), by = c("codgr", "libgr")) %>%
mutate(libsougr = ifelse(sougr == "99", libgr, libsougr)) %>%
left_join(distinct(select(role_repas, codegr, code_role)), by = c("codgr" = "codegr"))
#repas = read.csv("Base brute/Table_repas.csv", sep = ";", colClasses = c("character"))
#menage = read.csv("Base brute/Table_menage_1.csv", sep = ";", colClasses = c("character"))
role_repas = read_excel("Base_a_analyser/roles_repas.xlsx", col_types = "character")
#repas = read.csv("Base brute/Table_repas.csv", sep = ";", colClasses = c("character"))
#menage = read.csv("Base brute/Table_menage_1.csv", sep = ";", colClasses = c("character"))
role_repas = read_excel("Base_a_analyser/roles_repas.xlsx", col_types = c("character"))
#repas = read.csv("Base brute/Table_repas.csv", sep = ";", colClasses = c("character"))
#menage = read.csv("Base brute/Table_menage_1.csv", sep = ";", colClasses = c("character"))
role_repas = read_excel("Base_a_analyser/roles_repas.xlsx", col_types = "text")
nomenclature = nomenclature %>%
full_join(nomenclature %>%
select(codgr, libgr) %>%
distinct() %>%
mutate(group_alim = c("pain", "céréales pdj", "pâtes",
"riz et blé", "autres céréales", "viennoiserie",
"biscuits", "pâtisseries", "lait",
"produit laitier", "fromages", "oeufs",
"beurre", "huile", "margarine",
"autres graisses", "viande", "volaille",
"abats", "charcuterie", "poissons",
"crustacés et mollusques", "légumes", "pommes de terre",
"légumes secs", "fruits", "fruits secs",
"glaces", "chocolat", "sucres",
"eaux", "boissons sans alcool", "alcool",
"café", "boissons chaudes", "pizzas",
"sandwichs", "soupes", "plats composés",
"entremets", "compotes", "condiments",
"aliments particuliers", "-" )), by = c("codgr", "libgr")) %>%
mutate(libsougr = ifelse(sougr == "99", libgr, libsougr)) %>%
left_join(distinct(select(role_repas, codegr, code_role)), by = c("codgr" = "codegr"))
View(nomenclature)
sum(is.na(nomenclature$code_role))
nomenclature %>%
filter(is.na(code_role)) %>%
View()
#repas = read.csv("Base brute/Table_repas.csv", sep = ";", colClasses = c("character"))
#menage = read.csv("Base brute/Table_menage_1.csv", sep = ";", colClasses = c("character"))
role_repas = read_excel("Base_a_analyser/roles_repas.xlsx", col_types = "text")
# BASE BRUTE
nomenclature = read.csv("Base brute/Nomenclature_3.csv", sep = ";", colClasses = c("character"))
nomenclature = nomenclature %>%
full_join(nomenclature %>%
select(codgr, libgr) %>%
distinct() %>%
mutate(group_alim = c("pain", "céréales pdj", "pâtes",
"riz et blé", "autres céréales", "viennoiserie",
"biscuits", "pâtisseries", "lait",
"produit laitier", "fromages", "oeufs",
"beurre", "huile", "margarine",
"autres graisses", "viande", "volaille",
"abats", "charcuterie", "poissons",
"crustacés et mollusques", "légumes", "pommes de terre",
"légumes secs", "fruits", "fruits secs",
"glaces", "chocolat", "sucres",
"eaux", "boissons sans alcool", "alcool",
"café", "boissons chaudes", "pizzas",
"sandwichs", "soupes", "plats composés",
"entremets", "compotes", "condiments",
"aliments particuliers", "-" )), by = c("codgr", "libgr")) %>%
mutate(libsougr = ifelse(sougr == "99", libgr, libsougr)) %>%
left_join(distinct(select(role_repas, codegr, code_role)), by = c("codgr" = "codegr"))
nomenclature %>%
filter(is.na(code_role)) %>%
View()
nomenclature %>%
filter(is.na(code_role)) %>%
View()
nomenclature = nomenclature %>%
full_join(nomenclature %>%
select(codgr, libgr) %>%
distinct() %>%
mutate(group_alim = c("pain", "céréales pdj", "pâtes",
"riz et blé", "autres céréales", "viennoiserie",
"biscuits", "pâtisseries", "lait",
"produit laitier", "fromages", "oeufs",
"beurre", "huile", "margarine",
"autres graisses", "viande", "volaille",
"abats", "charcuterie", "poissons",
"crustacés et mollusques", "légumes", "pommes de terre",
"légumes secs", "fruits", "fruits secs",
"glaces", "chocolat", "sucres",
"eaux", "boissons sans alcool", "alcool",
"café", "boissons chaudes", "pizzas",
"sandwichs", "soupes", "plats composés",
"entremets", "compotes", "condiments",
"aliments particuliers", "-" )), by = c("codgr", "libgr")) %>%
mutate(libsougr = ifelse(sougr == "99", libgr, libsougr)) %>%
left_join(distinct(select(role_repas, codegr, code_role)), by = c("codgr" = "codegr")) %>%
filter(codgr != 45)
# BASE BRUTE
nomenclature = read.csv("Base brute/Nomenclature_3.csv", sep = ";", colClasses = c("character"))
nomenclature = nomenclature %>%
full_join(nomenclature %>%
select(codgr, libgr) %>%
distinct() %>%
mutate(group_alim = c("pain", "céréales pdj", "pâtes",
"riz et blé", "autres céréales", "viennoiserie",
"biscuits", "pâtisseries", "lait",
"produit laitier", "fromages", "oeufs",
"beurre", "huile", "margarine",
"autres graisses", "viande", "volaille",
"abats", "charcuterie", "poissons",
"crustacés et mollusques", "légumes", "pommes de terre",
"légumes secs", "fruits", "fruits secs",
"glaces", "chocolat", "sucres",
"eaux", "boissons sans alcool", "alcool",
"café", "boissons chaudes", "pizzas",
"sandwichs", "soupes", "plats composés",
"entremets", "compotes", "condiments",
"aliments particuliers", "-" )), by = c("codgr", "libgr")) %>%
mutate(libsougr = ifelse(sougr == "99", libgr, libsougr)) %>%
left_join(distinct(select(role_repas, codegr, code_role)), by = c("codgr" = "codegr")) %>%
filter(codgr != 45)
write.table(nomenclature, "Base_a_analyser/nomenclature.csv", sep = ";", row.names = FALSE)
#repas = read.csv("Base brute/Table_repas.csv", sep = ";", colClasses = c("character"))
#menage = read.csv("Base brute/Table_menage_1.csv", sep = ";", colClasses = c("character"))
role_repas = read_excel("Base_a_analyser/roles_repas.xlsx", col_types = "text")
# BASE BRUTE
nomenclature = read.csv("Base brute/Nomenclature_3.csv", sep = ";", colClasses = c("character"))
nomenclature = nomenclature %>%
full_join(nomenclature %>%
select(codgr, libgr) %>%
distinct() %>%
mutate(group_alim = c("pain", "céréales pdj", "pâtes",
"riz et blé", "autres céréales", "viennoiserie",
"biscuits", "pâtisseries", "lait",
"produit laitier", "fromages", "oeufs",
"beurre", "huile", "margarine",
"autres graisses", "viande", "volaille",
"abats", "charcuterie", "poissons",
"crustacés et mollusques", "légumes", "pommes de terre",
"légumes secs", "fruits", "fruits secs",
"glaces", "chocolat", "sucres",
"eaux", "boissons sans alcool", "alcool",
"café", "boissons chaudes", "pizzas",
"sandwichs", "soupes", "plats composés",
"entremets", "compotes", "condiments",
"aliments particuliers", "-" )), by = c("codgr", "libgr")) %>%
mutate(libsougr = ifelse(sougr == "99", libgr, libsougr)) %>%
left_join(distinct(select(role_repas, codegr, code_role)), by = c("codgr" = "codegr")) %>%
filter(codgr != 45)
nomenclature %>%
filter(is.na(code_role)) %>%
View()
write.table(nomenclature, "Base_a_analyser/nomenclature.csv", sep = ";", row.names = FALSE)
