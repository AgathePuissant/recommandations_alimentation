test_reiteration_fam = test_t_famille(reiteration_gen_famille_exp)
View(test_reiteration_seg)
View(test_reiteration_gen)
View(test_reiteration_fam)
options(stringsAsFactors = FALSE)
test_reiteration_fam = test_t_famille(reiteration_gen_famille_exp)
test_t_famille <- function(data) {
data = data %>%
filter(famille %in% c("COMPTEUR ET MODULE", "FACTURES", "FUITES", "OFFRES CLARIO", "PAIEMENT", "VIE DU CONTRAT")) %>%
select(famille, date_ouverture, pas_temps, exp, taux_rappel_cumul) %>%
group_by(famille, pas_temps, date_ouverture) %>%
mutate(eff = n ()) %>%
filter(eff > 1) %>%
ungroup()
d = data.frame()
for (fam in unique(data$famille)) {
for (pas in unique(data$pas_temps)) {
print(paste0("Pas de temps : ", pas))
result_test = t.test(taux_rappel_cumul ~ exp, data = filter(data, pas_temps == pas,
famille == fam), paired = TRUE)
print(result_test)
d = rbind(d, c(fam, pas, round(100*(1 - result_test$p.value), 2), round(100*result_test$conf.int/mean(filter(data, pas_temps == pas,
famille == fam,
exp == "Chargé(e) de clientèle")$taux_rappel_cumul), 2)))
}
}
d %>%
set_colnames(c("famille", "pas_temps", "confiance", "borne_inf", "borne_sup"))
}
test_reiteration_fam = test_t_famille(reiteration_gen_famille_exp)
test_reiteration_seg = test_t_segment(reiteration_segment_exp)
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n())
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
tidyr::spread(key = exp, values = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup() %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup() %>%
tidyr::spread(key = exp, value = famille) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup() %>%
tidyr::spread(key = exp, value = nbre_appel_annuel, -c(famille)) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup() %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()
test = demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()
test = test %>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
arrange(desc(nbre_appel_annuel)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
mutate(part = `Chargé(e)s de clientèle confirmé(e)s`/`Chargé(e)s de clientèle`) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
mutate(part = `Chargé(e) de clientèle confirmé(e)`/`Chargé(e) de clientèle`) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
mutate(part = round(100*`Chargé(e) de clientèle confirmé(e)`/`Chargé(e) de clientèle`,2)) %>%
arrange(desc(part)) %>%
View()
demandes_2019 %>%
group_by(famille, exp) %>%
summarise(nbre_appel_annuel = n()) %>%
ungroup()%>%
tidyr::spread(key = exp, value = nbre_appel_annuel) %>%
mutate(part = round(100*`Chargé(e) de clientèle confirmé(e)`/`Chargé(e) de clientèle`,2)) %>%
arrange(desc(part)) %>%
filter(!is.na(famille)) %>%
View()
load("D:/APT/3e_annee/Projet fil rouge/code_groupe/recommandations_alimentation/.RData")
repas[4,5[]]
repas[4,5]
library(ISLR)
install.packages('ISLR')
library(ISLR)
str(Hitter)
str(Hitters)
library(ISLR)
library(pls)
---
title: "Hitters data"
author: "Nom"
date: "22 Janvier 2020"
output:
html_document: default
pdf_document: default
---
install.packages('pls')
```{r setup, include=FALSE}
library(ISLR)
library(pls)
library(FactoMineR)
library(glmnet)
```
---
title: "Hitters data"
author: "Nom"
date: "22 Janvier 2020"
output:
html_document: default
pdf_document: default
---
install.packages('FactoMineR')
```{r setup, include=FALSE}
library(ISLR)
library(pls)
library(FactoMineR)
library(glmnet)
```
---
title: "Hitters data"
author: "Nom"
date: "22 Janvier 2020"
output:
html_document: default
pdf_document: default
---
install.packages('glmnet')
```{r setup, include=FALSE}
library(ISLR)
library(pls)
library(FactoMineR)
library(glmnet)
```
library(ISLR)
library(pls)
library(FactoMineR)
library(glmnet)
str(Hitters)
str(Hitters)
# salaire manquant pour certains joueurs
sum(is.na(Hitters$Salary))
Hitters=na.omit(Hitters)
dim(Hitters)
x=model.matrix(Salary~.,Hitters)[,-1]
# design sans la constante
y=Hitters$Salary
head(cor(x))
heatmap(abs(cor(x)), symm=TRUE)
acp=PCA(x,graph=F)
head(round(acp$eig,4))
plot(acp, choix = "var", axes = c(1,2))
plot(acp, choix = "ind", axes = c(1,2))
plot(acp, choix = "var", axes = c(1,3))
plot(acp, choix = "var", axes = c(2,3))
View(Hitters)
x=model.matrix(Salary~.,Hitters)[,-1]
# design sans la constante
y=Hitters$Salary
head(cor(x))
heatmap(abs(cor(x)), symm=TRUE)
acp=PCA(x,graph=F)
head(round(acp$eig,4))
plot(acp, choix = "var", axes = c(1,2))
plot(acp, choix = "ind", axes = c(1,2))
plot(acp, choix = "var", axes = c(1,3))
plot(acp, choix = "var", axes = c(2,3))
lm.hitters=lm(y~x)
par(mfrow=c(2,2))
plot(lm.hitters)
lm.hitters=lm(sqrt(y)~x)
plot(lm.hitters)
summary(lm.hitters)
cor(x)
heatmap(abs(cor(x)), symm=FALSE)
heatmap(abs(cor(x)), symm=TRUE)
# design sans la constante
y=Hitters$Salary
acp = PCA(x, graph = F)
acp
acp$eig
x = model.matrix(Salary~.,Hitters)[,-1]
# design sans la constante
y = Hitters$Salary
# Corrélation entre les variables de x
head(cor(x))
# Heat map de la corrélation entre les variables
heatmap(abs(cor(x)), symm = TRUE)
# ACP
acp = PCA(x, graph = F)
head(round(acp$eig,4))
plot(acp, choix = "var", axes = c(1,2))
plot(acp, choix = "ind", axes = c(1,2))
plot(acp, choix = "var", axes = c(1,3))
plot(acp, choix = "var", axes = c(2,3))
lm.hitters=lm(sqrt(y)~x)
summary(lm.hitters)
#anove
anova(lm.hitters)
#anova
ancova(lm.hitters)
#anova
Anova(lm.hitters)
#anova
car::Anova(lm.hitters)
car::step(lm.hitters, direction = "both")
step(lm.hitters, direction = "both")
colnames(Hitters)
#anova
lm_ano = lm(Salary ~ AtBat + Hits + HmRun + Runs + League + NewLeague + CRBI, data = Hitters)
car::Anova(lm_ano)
step(lm_ano, direction = "both")
seq(10,-2,length=100)
# grille de lambda de 10^10 a 10^-2
grid=10^seq(10,-2,length=100)
ridge.hitters=glmnet(x,y,alpha=0,lambda=grid)
# coeffs avec lambda grand
ridge.hitters$lambda[50]
# glmnet standardise les donnees par defaut
dim(coef(ridge.hitters))
ridge.hitters
# coeffs avec lambda grand
ridge.hitters$lambda[50]
coef(ridge.hitters)[,50]
# coeffs avec lambda plus petit
ridge.hitters$lambda[60]
coef(ridge.hitters)[,60]
predict(ridge.hitters,s=50,type="coefficients")[1:20,]
predict(ridge.hitters,s=50,type="coefficients")
x = model.matrix(Salary~.,Hitters)[,-1]
x = scale(x)
x
# design sans la constante
y = Hitters$Salary
# Corrélation entre les variables de x
head(cor(x))
# Heat map de la corrélation entre les variables
heatmap(abs(cor(x)), symm = TRUE)
lm.hitters=lm(y~x)
par(mfrow=c(2,2))
plot(lm.hitters)
lm.hitters=lm(sqrt(y)~x)
plot(lm.hitters)
summary(lm.hitters)
grid=10^seq(10,-2,length=100)
ridge.hitters=glmnet(x,y,alpha=0,lambda=grid)
# glmnet standardise les donnees par defaut
dim(coef(ridge.hitters))
# coeffs avec lambda grand
ridge.hitters$lambda[50]
coef(ridge.hitters)[,50]
# coeffs avec lambda plus petit
ridge.hitters$lambda[60]
coef(ridge.hitters)[,60]
View(x)
x_ori = model.matrix(Salary~.,Hitters)[,-1]
View(x_ori)
set.seed(1) # graine alea pour que ce soit reproductible
train=sample(1:nrow(x),nrow(x)/2)
test=(-train)
y.test=y[test]
ridge.hitters.train=glmnet(x[train,],y[train],alpha=0,lambda=grid)
# avec lambda=4
ridge.hitters.pred=predict(ridge.hitters.train,s=4,newx=x[test,])
mean((ridge.hitters.pred-y.test)^2)
# model avec cste uniqument
mean((y[train]-y.test[-1])^2)
# avec lambda tres grand
ridge.hitters.pred=predict(ridge.hitters.train,s=10^10,newx=x[test,])
mean((ridge.hitters.pred-y.test)^2)
# avec lambda nul
ridge.hitters.pred=predict(ridge.hitters.train,s=0,newx=x[test,])
mean((ridge.hitters.pred-y.test)^2)
ridge.hitters.train=cv.glmnet(x[train,],y[train],alpha=0)
par(mfrow=c(1,1))
plot(ridge.hitters.train)
bestlam=ridge.hitters.train$lambda.min
ridge.hitters.pred=predict(ridge.hitters.train,s=bestlam,newx=x[test,])
mean((ridge.hitters.pred-y.test)^2)
x = model.matrix(Salary~.,Hitters)[,-1]
View(x)
d = read.table("Downloads/201718_exo2.txt")
d = read.table("C:/Users/ADMIN/Downloads/201718_exo2.txt")
View(d)
d = read.table("C:/Users/ADMIN/Downloads/201718_exo2.txt", header = TRUE)
d
summary(aov(d$rend ~ d$prod))
tapply(d$prod, d$rend, d$rend - mean)
tapply(d$prod, d$rend, mean)
tapply(d$rend, d$prod, mean)
library(magrittr)
library(dplyr)
d %>%
group_by(prod) %>%
summarise(rend = rend - mean(rend))
d %>%
group_by(prod) %>%
summarise(rend = rend - mean())
d %>%
group_by(prod) %>%
summarise(rend = mean(rend))
d %>%
group_by(prod) %>%
mutate(moy = mean(rend),
diff = rend - moy)
d1 = d %>%
group_by(prod) %>%
mutate(moy = mean(rend),
diff = rend - moy)
sum(d1)
sum(d1$diff)
sum(d1$diff**2)
sd(d$rend)
sd(d$rend)*n/(n-1)
sd(d$rend)*24/23
d$rend-tapply(d$rend, d$prod, mean)
sd(y$rend)
sd(d$rend)
data = read.csv("D:/APT/3e_annee/Statistique/Projet/Table_metabolome_FH_all.csv", sep = ";", stringsAsFactors = FALSE)
View(data)
colnames(data)
library(magrittr)
library(dplyr)
conso = read.csv("D:/APT/3e_annee/Projet fil rouge/code_groupe/recommandations_alimentation/Base brute/Table_conso.csv", sep = ";")
View(conso)
data = read.table("C:/201718_exo2.txt")
data = read.table("C:/Users/ADMIN/Downloads/201718_exo2.txt")
View(data)
data = read.table("C:/Users/ADMIN/Downloads/201718_exo2.txt", header = TRUE)
View(data)
summary(aov(data$rend ~ data$prod))
nomenclature = read.csv("Base_a_analyser/nomenclature.csv", sep = ";", colClasses = c("character"))
consommation = read.csv("Base_a_analyser/consommation.csv", sep = ",", colClasses = c("character"))
individu = read.csv("Base_a_analyser/individu.csv", sep = ";", colClasses = c("character"))
repas = read.csv("Base_a_analyser/repas.csv", sep = ";", colClasses = c("character"))
library(magrittr)
library(dplyr)
library(tidyr)
library(ggplot2)
library(plotly)
library(data.table)
load("D:/APT/3e_annee/Projet fil rouge/code_groupe/recommandations_alimentation/Code/.RData")
#setwd("C:/Users/agaca/Documents/GitHub/recommandations_alimentation/Code")
setwd("D:/APT/3e_annee/Projet fil rouge/code_groupe/recommandations_alimentation/Code")
nomenclature = read.csv("Base_a_analyser/nomenclature.csv", sep = ";", colClasses = c("character"))
consommation = read.csv("Base_a_analyser/consommation.csv", sep = ",", colClasses = c("character"))
individu = read.csv("Base_a_analyser/individu.csv", sep = ";", colClasses = c("character"))
repas = read.csv("Base_a_analyser/repas.csv", sep = ";", colClasses = c("character"))
prep_conso_pattern <- function(echelle) {
"La fonction qui crée la base pour l'analyse de motif fréquent par groupe d'aliement ou par sous-groupe d'aliment.
Les filtres appliqués :
+ Enlever la collation du matin et celle du soir
INPUT :
+ echelle : 'groupe' si l'analyse est basée sur groupe d'aliment
'sous-groupe' si l'analyse est basée sur sous-groupe d'aliment -- str
OUPUT :
+ Base de données dont les colonnes sont les groupes / sous-groupes d'aliments et les lignes sont les types de repas de chaque individu :
+ 1 : si le groupe / sous-groupe d'aliment est consommé
+ 0 : sinon"
if (echelle == "groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, libgr)), by = "codgr") %>%
filter(codgr != "45", #code non identifié
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-déjeuner, le déjeuner et le diner
select(-codgr) %>%
group_by(nomen, nojour, tyrep, cluster_consommateur) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un aliment
group_by(nomen, nojour, tyrep, libgr, cluster_consommateur) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libgr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
full_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
} else if (echelle == "sous-groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, sougr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, sougr, libsougr)), by = c("codgr", "sougr")) %>%
filter(codgr != "45", #code non identifié
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-déjeuner, le déjeuner et le diner
select(- c(codgr, sougr)) %>%
group_by(nomen, nojour, tyrep, cluster_consommateur) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un d'aliment
group_by(nomen, nojour, tyrep, libsougr, cluster_consommateur) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libsougr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
left_join(distinct(select(individu, nomen, id_categorie)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
}
data
}
conso_pattern_sougr = prep_conso_pattern(echelle = "sous-groupe")
colnames(conso_pattern_sougr)
prep_conso_pattern <- function(echelle) {
"La fonction qui crée la base pour l'analyse de motif fréquent par groupe d'aliement ou par sous-groupe d'aliment.
Les filtres appliqués :
+ Enlever la collation du matin et celle du soir
INPUT :
+ echelle : 'groupe' si l'analyse est basée sur groupe d'aliment
'sous-groupe' si l'analyse est basée sur sous-groupe d'aliment -- str
OUPUT :
+ Base de données dont les colonnes sont les groupes / sous-groupes d'aliments et les lignes sont les types de repas de chaque individu :
+ 1 : si le groupe / sous-groupe d'aliment est consommé
+ 0 : sinon"
if (echelle == "groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, libgr)), by = "codgr") %>%
filter(codgr != "45", #code non identifié
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-déjeuner, le déjeuner et le diner
select(-codgr) %>%
group_by(nomen, nojour, tyrep, cluster_consommateur) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un aliment
group_by(nomen, nojour, tyrep, libgr, cluster_consommateur) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libgr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
full_join(distinct(select(individu, nomen)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
} else if (echelle == "sous-groupe") {
data = consommation %>%
select(nomen, nojour, tyrep, codgr, sougr, cluster_consommateur) %>%
full_join(distinct(select(nomenclature, codgr, sougr, libsougr)), by = c("codgr", "sougr")) %>%
filter(codgr != "45", #code non identifié
tyrep %in% c("1", "3", "4", "5")) %>% #garder que le petit-déjeuner, le déjeuner et le diner
select(- c(codgr, sougr)) %>%
group_by(nomen, nojour, tyrep, cluster_consommateur) %>%
# filter(n() > 1 ) %>% #enlever les repas d'un d'aliment
group_by(nomen, nojour, tyrep, libsougr, cluster_consommateur) %>%
summarise(eff = 1) %>%
tidyr::spread(key = libsougr, value = eff) %>%
ungroup() %>%
mutate_all(~replace(., is.na(.), 0)) %>%
left_join(distinct(select(individu, nomen)), by = "nomen") %>%
left_join(distinct(select(repas, nomen, nojour, tyrep, avecqui)), by = c("nomen", "nojour", "tyrep"))
}
data
}
conso_pattern_sougr = prep_conso_pattern(echelle = "sous-groupe")
# transformation
conso_pattern_sougr_transfo = conso_pattern_sougr %>%
mutate(lib_tyrep = ifelse(tyrep == 1, "petit-dejeuner",
ifelse(tyrep == 3, "dejeuner",
ifelse(tyrep == 4, "gouter", "diner"))),
#lib_avecqui = ifelse(is.na(avecqui), "NA", "adefinir"),
lib_avecqui = ifelse(avecqui == 1, "seul",
ifelse(avecqui == 2, "famille",
ifelse(avecqui == 3, "amis",
ifelse(avecqui == "", "avecqui_missing", "autre")))),
lib_cluster = paste0("cluster_", cluster_consommateur),
val_tyrep = 1,
val_avecqui = 1,
val_cluster = 1) %>%
spread(key = lib_tyrep, value = val_tyrep, fill = 0) %>%
spread(key = lib_avecqui, value = val_avecqui, fill = 0) %>%
spread(key = lib_cluster, value = val_cluster, fill = 0) %>%
select(- avecqui_missing)
write.table(conso_pattern_sougr_transfo, "Base_a_analyser/conso_pattern_sougr_transfo.csv", sep = ";", row.names = FALSE)
